"use strict";(self.webpackChunksaurus=self.webpackChunksaurus||[]).push([[6379],{214:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"developer-guide/projects/otk/omnifest/external","title":"External","description":"External directives are directives that are implemented externally from otk.","source":"@site/docs/developer-guide/02-projects/otk/03-omnifest/02-external.md","sourceDirName":"developer-guide/02-projects/otk/03-omnifest","slug":"/developer-guide/projects/otk/omnifest/external","permalink":"/docs/developer-guide/projects/otk/omnifest/external","draft":false,"unlisted":false,"editUrl":"https://github.com/osbuild/osbuild.github.io/tree/main/docs/developer-guide/02-projects/otk/03-omnifest/02-external.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"developer","previous":{"title":"Directive","permalink":"/docs/developer-guide/projects/otk/omnifest/directive"},"next":{"title":"Best Practices","permalink":"/docs/developer-guide/projects/otk/best-practices"}}');var t=s(4848),l=s(8453);const o={},d="External",r={},a=[{value:"Protocol",id:"protocol",level:2},{value:"Example",id:"example",level:2},{value:"Paths",id:"paths",level:2},{value:"Naming",id:"naming",level:2},{value:"Implementations",id:"implementations",level:2},{value:"<code>osbuild-gen-depsolve-dnf4</code>.",id:"osbuild-gen-depsolve-dnf4",level:3},{value:"<code>osbuild-make-depsolve-dnf4-rpm-stage</code>",id:"osbuild-make-depsolve-dnf4-rpm-stage",level:3},{value:"<code>osbuild-make-depsolve-dnf4-curl-source</code>",id:"osbuild-make-depsolve-dnf4-curl-source",level:3},{value:"<code>osbuild-gen-partition-table</code>",id:"osbuild-gen-partition-table",level:3},{value:"<code>osbuild-make-partition-mounts-devices</code>",id:"osbuild-make-partition-mounts-devices",level:3},{value:"<code>osbuild-make-partition-stages</code>",id:"osbuild-make-partition-stages",level:3},{value:"<code>osbuild-gen-inline-files</code>",id:"osbuild-gen-inline-files",level:3},{value:"<code>osbuild-make-inline-source</code>",id:"osbuild-make-inline-source",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"external",children:"External"})}),"\n",(0,t.jsxs)(n.p,{children:["External directives are directives that are implemented externally from ",(0,t.jsx)(n.code,{children:"otk"}),".\nThey are meant to be used to provide target-specific behavior and can be used\nto express things where ",(0,t.jsx)(n.code,{children:"otk"})," is not expressive enough."]}),"\n",(0,t.jsx)(n.h2,{id:"protocol",children:"Protocol"}),"\n",(0,t.jsx)(n.p,{children:"Directives are small executables that receive JSON and are expected to output\nJSON again in a specific format. Additional keys are not allowed."}),"\n",(0,t.jsxs)(n.p,{children:["When we have an ",(0,t.jsx)(n.a,{href:"/docs/developer-guide/projects/otk/omnifest/",children:"omnifest"})," that looks like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'otk.external.name:\n  child:\n    - 1\n  options: "are here"\n'})}),"\n",(0,t.jsx)(n.p,{children:"The external gets called with the following JSON:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "tree": {\n    "child": [1],\n    "options": "are here"\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["And is expected to return a JSON dict with a single top-level ",(0,t.jsx)(n.code,{children:"tree"})," object that can contain arbitrary values. Additional top-level keys are not allowed. Example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "tree": {\n    "what": {\n      "you": "want"\n    }\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Which will replace the previous ",(0,t.jsx)(n.code,{children:"otk.external.name"})," subtree with the output of new subtree from the external command. Example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'tree:\n  what:\n    you: "want"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["If the external returns ",(0,t.jsx)(n.code,{children:"{}"}),", an empty object, ",(0,t.jsx)(n.code,{children:"otk"})," will assume that there is\nno tree to replace and remove the node instead. This will turn the following\nYAML:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"dummy:\n  otk.external.name:\n    options:\n"})}),"\n",(0,t.jsx)(n.p,{children:"Into this YAML structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"dummy:\n"})}),"\n",(0,t.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:"The following example demonstrates how an external can be used to implement string\nconcatenation."}),"\n",(0,t.jsxs)(n.p,{children:["Given the following script called ",(0,t.jsx)(n.code,{children:"concat"})," in ",(0,t.jsx)(n.code,{children:"/usr/local/libexec/otk/concat"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'#!/usr/bin/env bash\n\noutput="$(cat - | jq -jr \'.tree.parts[]\')"\necho "{\\"tree\\":{\\"output\\":\\"$output\\"}}"\n'})}),"\n",(0,t.jsx)(n.p,{children:"and the following directive:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"examplestring:\n  otk.external.concat:\n    parts:\n      - list\n      - of\n      - strings\n"})}),"\n",(0,t.jsx)(n.p,{children:"the script is called with the following data on stdin:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "tree": {\n    "parts": [\n      "list",\n      "of",\n      "strings"\n    ]\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"which results in the following output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "tree": {\n    "output": "listofstrings"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"and the final omnifest will be:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"examplestring:\n  output: listofstrings\n"})}),"\n",(0,t.jsx)(n.h2,{id:"paths",children:"Paths"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"otk"})," will look for external directives in the following paths, stopping when\nit finds the first match:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["A path defined by the ",(0,t.jsx)(n.code,{children:"OTK_EXTERNAL_PATH"})," environment variable."]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"/usr/local/libexec/otk/external"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"/usr/libexec/otk/external"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"/usr/local/lib/otk/external"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"/usr/lib/otk/external"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The filename for an external executable is based on the external name. When the\nfollowing directive is encountered: ",(0,t.jsx)(n.code,{children:"otk.external.<name>"})," then\n",(0,t.jsx)(n.code,{children:"otk"})," will try to find an executable called ",(0,t.jsx)(n.code,{children:"<name>"})," in the previously\nmentioned search paths."]}),"\n",(0,t.jsx)(n.p,{children:"Examples:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"otk.external.foo"})," -> ",(0,t.jsx)(n.code,{children:"foo"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"otk.external.osbuild-bar"})," -> ",(0,t.jsx)(n.code,{children:"osbuild-bar"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"naming",children:"Naming"}),"\n",(0,t.jsxs)(n.p,{children:["So far we've followed a common naming scheme for the externals we're providing.\nSo far externals usually generate defines which are then later used by other\nexternals to transform those variables into (for example) ",(0,t.jsx)(n.code,{children:"osbuild"})," stages or\nsources."]}),"\n",(0,t.jsxs)(n.p,{children:["For our naming we prefix the externals that generate variables in a define block\nwith: ",(0,t.jsx)(n.code,{children:"osbuild-gen-"})," which indicates that this external is meant for use with\n",(0,t.jsx)(n.code,{children:"osbuild"})," and that it ",(0,t.jsx)(n.em,{children:"generates"})," variables."]}),"\n",(0,t.jsxs)(n.p,{children:["Externals that use (generated) variables follow the idiom of ",(0,t.jsx)(n.code,{children:"osbuild-make-"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["As an example the ",(0,t.jsx)(n.code,{children:"osbuild-gen-depsolve-dnf4"})," external will dependency solve its\noptions into a bunch of variables which are then later used to generate stages in\nan ",(0,t.jsx)(n.code,{children:"osbuild"})," target with ",(0,t.jsx)(n.code,{children:"osbuild-make-depsolve-dnf4-rpm-stage"})," and sources with\n",(0,t.jsx)(n.code,{children:"osbuild-make-depsolve-dnf4-curl-source"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"implementations",children:"Implementations"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"otk"})," currently ships together with some external implementations to work with\n",(0,t.jsx)(n.code,{children:"osbuild"}),"."]}),"\n",(0,t.jsxs)(n.h3,{id:"osbuild-gen-depsolve-dnf4",children:[(0,t.jsx)(n.code,{children:"osbuild-gen-depsolve-dnf4"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"osbuild"})," target requires a list of solved packages and sources in its manifest.\nThe ",(0,t.jsx)(n.code,{children:"osbuild-gen-depsolve-dnf4"})," external is used to generate these based on a list\nof packages to be included and excluded."]}),"\n",(0,t.jsxs)(n.p,{children:["This external requires ",(0,t.jsx)(n.code,{children:"osbuild-depsolve-dnf"})," to be installed on the system that runs\n",(0,t.jsx)(n.code,{children:"otk"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"An example invocation is like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'otk.define:\n  packages:\n    otk.external.osbuild-gen-depsolve-dnf4:\n      architecture: "x86_64"\n      module_platform_id: "c9s"\n      releasever: "9"\n      repositories:\n        - id: "foo"\n          baseurl: "https://example.com/"\n        - id: "bar"\n          baseurl: "https://example.com/"\n      packages:\n        include:\n          - "@core"\n        exclude:\n          - "foo"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The result in the ",(0,t.jsx)(n.code,{children:"packages"})," variable can then be used by other externals."]}),"\n",(0,t.jsx)(n.h3,{id:"osbuild-make-depsolve-dnf4-rpm-stage",children:(0,t.jsx)(n.code,{children:"osbuild-make-depsolve-dnf4-rpm-stage"})}),"\n",(0,t.jsxs)(n.p,{children:["Use the generated defines from ",(0,t.jsx)(n.code,{children:"osbuild-gen-depsolve-dnf4"})," to create an RPM\nstage for an ",(0,t.jsx)(n.code,{children:"osbuild"})," manifest:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'otk.external.osbuild-make-depsolve-dnf4-rpm-stage:\n  packageset: ${packages}  # generated by `osbuild-gen-depsolve-dnf4`\n  gpgkeys:\n    - "---"\n    - "---"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"osbuild-make-depsolve-dnf4-curl-source",children:(0,t.jsx)(n.code,{children:"osbuild-make-depsolve-dnf4-curl-source"})}),"\n",(0,t.jsxs)(n.p,{children:["Use the generated defines from ",(0,t.jsx)(n.code,{children:"osbuild-gen-depsolve-dnf4"})," to create a sources\nlist for an ",(0,t.jsx)(n.code,{children:"osbuild"})," manifest."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"otk.target.osbuild:\n  sources:\n    otk.external.osbuild-make-depsolve-dnf4-curl-source:\n      packagesets:\n        - ${packages}  # generated by `osbuild-gen-depsolve-dnf4`\n"})}),"\n",(0,t.jsx)(n.h3,{id:"osbuild-gen-partition-table",children:(0,t.jsx)(n.code,{children:"osbuild-gen-partition-table"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"osbuild-gen-partition-table"})," generates defines for stages and mounts that\ncreate filesystems and partition tables in ",(0,t.jsx)(n.code,{children:"osbuild"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'otk.define:\n  filesystem:\n    otk.external.osbuild-gen-partition-table:\n      modifications: {}  # empty\n      properties:\n        type: gpt\n        bios: true\n        default_size: "10 GiB"\n        uuid: D209C89E-EA5E-4FBD-B161-B461CCE297E0\n        create:\n          bios_boot_partition: false\n          esp_partition: true\n          esp_partition_size: "200 MiB"\n      partitions:\n        - name: boot\n          mountpoint: /boot\n          label: boot\n          size: "1 GiB"\n          type: "xfs"\n          fs_mntops: defaults\n          # XXX: should we derive this automatically from the mountpoint?\n          part_type: BC13C2FF-59E6-4262-A352-B275FD6F7172\n          # we use hardcoded uuids for compatibility with "images"\n          part_uuid: CB07C243-BC44-4717-853E-28852021225B\n        - name: root\n          mountpoint: /\n          label: root\n          type: "xfs"\n          size: "2 GiB"\n          fs_mntops: defaults\n          # XXX: should we derive this automatically from the mountpoint?\n          part_type: 0FC63DAF-8483-4772-8E79-3D69D8477DE4\n          # we use hardcoded uuids for compatibility with "images"\n          part_uuid: 6264D520-3FB9-423F-8AB8-7A0A8E3D3562\n  # XXX: it would be nicer if the "fs_options" could be part of their\n  # stages directly without this indirection.\n  fs_options:\n    otk.external.osbuild-make-partition-mounts-devices:\n      ${filesystem}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"osbuild-make-partition-mounts-devices",children:(0,t.jsx)(n.code,{children:"osbuild-make-partition-mounts-devices"})}),"\n",(0,t.jsxs)(n.p,{children:["Creates mounts and devices for ",(0,t.jsx)(n.code,{children:"osbuild"})," based on the\n",(0,t.jsx)(n.code,{children:"osbuild-gen-partition-table"})," external."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"otk.external.osbuild-make-partition-mounts-devices:\n  ${filesystem}  # generated by `osbuild-gen-partition-table`\n"})}),"\n",(0,t.jsx)(n.h3,{id:"osbuild-make-partition-stages",children:(0,t.jsx)(n.code,{children:"osbuild-make-partition-stages"})}),"\n",(0,t.jsxs)(n.p,{children:["Creates stages for ",(0,t.jsx)(n.code,{children:"osbuild"})," based on the ",(0,t.jsx)(n.code,{children:"osbuild-gen-partition-table"}),"\nexternal."]}),"\n",(0,t.jsx)(n.p,{children:"The following example generates the stages and copy-to-device stages for\nan image pipeline:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"otk.op.join:\n  values:\n    - otk.external.osbuild-make-partition-stages:\n        ${filesystem}  # generated by `osbuild-gen-partition-table`\n    - - type: org.osbuild.copy\n        inputs:\n          root-tree:\n            type: org.osbuild.tree\n            origin: org.osbuild.pipeline\n            references:\n              - name:os\n        options:\n          paths:\n            - from: input://root-tree/\n              to: mount://-/\n        devices:\n          ${fs_options.devices}  # generated by `osbuild-gen-partition-table`\n        mounts:\n          ${fs_options.mounts}  # generated by `osbuild-gen-partition-table`\n"})}),"\n",(0,t.jsx)(n.h3,{id:"osbuild-gen-inline-files",children:(0,t.jsx)(n.code,{children:"osbuild-gen-inline-files"})}),"\n",(0,t.jsxs)(n.p,{children:["Generate variables for inline files so they can be used as ",(0,t.jsx)(n.code,{children:"osbuild"})," sources:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"files:\n  otk.external.osbuild-gen-inline-files:\n    inline:\n      kickstart:\n        contents: |\n          # Run initial-setup on first boot\n          # Created by osbuild\n          firstboot --reconfig\n          lang en_US.UTF-8\n"})}),"\n",(0,t.jsx)(n.h3,{id:"osbuild-make-inline-source",children:(0,t.jsx)(n.code,{children:"osbuild-make-inline-source"})}),"\n",(0,t.jsxs)(n.p,{children:["Use the variables as generated by ",(0,t.jsx)(n.code,{children:"osbuild-gen-inline-files"})," to create the\nnecessary sources for ",(0,t.jsx)(n.code,{children:"osbuild"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"otk.external.osbuild-make-inline-source:\n  const:\n    files: ${files.const.files}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>d});var i=s(6540);const t={},l=i.createContext(t);function o(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);